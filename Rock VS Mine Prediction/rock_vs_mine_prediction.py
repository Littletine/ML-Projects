# -*- coding: utf-8 -*-
"""Rock VS Mine Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IpocgrJGcvtoizsKE61lERnxcpAd9CeU

## **ROCK VS MINE PREDICTION**  <br>
*Dataset: Sonar Mine dataset from Kaggle* [Dataset link](https://www.kaggle.com/datasets/mayurdalvi/sonar-mine-dataset)

#### Importing dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""#### Data collection and Data Processing"""

#Loading dataset to pandas dataframe
sonar_data=pd.read_csv('/content/sonar data.csv',header=None)
sonar_data.head()

#Number of rows and columns
sonar_data.shape

#Statistical measure of the data
sonar_data.describe()

#How many rocks and how many mines
sonar_data.iloc[:,60].value_counts()

sonar_data.groupby(60).mean()

"""#### Data preprocessing

Handle:
*   NULL values
*   Standardization
*   Imbalanced dataset

*Dataset is already standardised, balanced and has no null*






"""

#How many null values
sonar_data.isnull().sum()

"""#### Separating data and labels"""

X=sonar_data.drop(columns=60,axis=1)
Y=sonar_data[60]

X.head()

Y.head()

"""#### Splitting into training and testing data"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.1,stratify=Y,random_state=1)
#stratify makes sure that there are almost equal amount of rock and mine rows in training data and also in testing data
#random_state ensures that the data is splitted in a particular way

print(X.shape,X_train.shape, X_test.shape)

"""#### Model training

Logistic Regression model as we are performing binary classification on supervised data
"""

model=LogisticRegression()

#Training the model
model.fit(X_train,Y_train)

"""Model Evaluation"""

#Accuracy score (>70% good also depends amount of data)

#On the training data
X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)
print('Accuracy on training data: ',training_data_accuracy)

X_test_prediction=model.predict(X_test)
testing_data_accuracy=accuracy_score(X_test_prediction,Y_test)
print('Accuracy on testing data: ',testing_data_accuracy)

"""#### Making a predictive system"""

input_data=(0.0307,0.0523,0.0653,0.0521,0.0611,0.0577,0.0665,0.0664,0.1460,0.2792,0.3877,0.4992,0.4981,0.4972,0.5607,0.7339,0.8230,0.9173,0.9975,0.9911,0.8240,0.6498,0.5980,0.4862,0.3150,0.1543,0.0989,0.0284,0.1008,0.2636,0.2694,0.2930,0.2925,0.3998,0.3660,0.3172,0.4609,0.4374,0.1820,0.3376,0.6202,0.4448,0.1863,0.1420,0.0589,0.0576,0.0672,0.0269,0.0245,0.0190,0.0063,0.0321,0.0189,0.0137,0.0277,0.0152,0.0052,0.0121,0.0124,0.0055)

#Convert to numpy array as it faster
input_data_as_numpy_array= np.asarray(input_data)

#Reshape numpy array as we are predicting for one instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1) #One instance

prediction=model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]=='R'):
  print('The object is a Rock')
else:
  print('The object is a mine')

